#!/usr/bin/env python
"""Cardboard linter driver script. See README.rst for details."""

from __future__ import print_function

import argparse
import sys

import yaml

from cardboardlint.common import run_command
from cardboardlint.linter_cppcheck import linter_cppcheck
from cardboardlint.linter_import import linter_import
from cardboardlint.linter_namespace import linter_namespace
from cardboardlint.linter_pylint import linter_pylint


def main():
    """Main routine."""
    # get arguments
    args = parse_args()

    # get git diff
    files_lines = run_diff(args.refspec)

    # load lint configuration for module
    configs = load_config('.cardboardlint.yml')

    # select specific linter if desired
    if args.selections is not None:
        configs = [(linter_name, linter_config) for linter_name, linter_config in configs
                   if linter_name in args.selection]

    returncode = 0
    for linter_name, linter_config in configs:
        print('~'*80)
        print('### {:^72} ###'.format(linter_name))
        print('~'*80)
        messages = [message for message
                    in LINTERS[linter_name](linter_config, files_lines)
                    if message.indiff(files_lines)]
        messages.sort()
        if len(messages) > 0:
            print()
            returncode = -1
            for message in messages:
                print(message)
        print()
    sys.exit(returncode)


def parse_args():
    """Parse the arguments given to the script."""
    parser = argparse.ArgumentParser(prog='cardboardlint')
    parser.add_argument('--refspec', dest='refspec', nargs='?', default=None,
                        help=('The parent commit used to compute the diff. If given, only the files'
                              ' that have been changed will be compared. Otherwise, all files are '
                              'compared.'))
    # The next argument should become a lot smarter in future, e.g. select all static or
    # dynamic linters, or a fraction of them, e.g. "dynamic 0%-33%".
    parser.add_argument('--selections', dest='selections', nargs='*', default=None,
                        help='Run just the given linters.')
    return parser.parse_args()


def run_diff(refspec_parent):
    """Run git diff with respect to current branch.

    Parameters
    ----------
    refspec_parent : str
        Reference to the parent branch

    Returns
    -------
    files_lines : dict
        Dictionary with (filename,  line_numbers) to represent all changed lines in a way
        that allows efficient testing in the `indiff` method of the Message class. When
        line_numbers is None, it means that all lines should be considered for testing.
    """
    # generate 0 lines of context (i.e. only the lines that differ)
    files_lines = {}
    if refspec_parent is not None:
        command = ['git', 'diff', '-U0', refspec_parent]
        diff_output = run_command(command)[0]

        # parse git diff output
        current_filename = None
        for line in diff_output.splitlines():
            if line.startswith('+++ b/'):
                current_filename = line[6:]
            elif line.startswith('@@ '):
                added_str = line.split()[2]
                # multiple lines added/modified
                if added_str.count(',') == 1:
                    offset, nlines = added_str.split(',')
                    line_numbers = set(range(int(offset), int(offset) + int(nlines) + 1))
                # single line added/modified
                else:
                    offset = int(added_str)
                    line_numbers = set([offset])
                # store line numbers
                files_lines.setdefault(current_filename, set()).update(line_numbers)
    else:
        # Just get the current list of files in the repo and include all lines
        command = ['git', 'ls-files']
        ls_output = run_command(command)[0]
        for filename in ls_output.splitlines():
            files_lines[filename] = None

    return files_lines


def load_config(config_file):
    """Returns dictionary that corresponds to the given yaml file.

    Parameters
    ----------
    config_file : str
        Name of the configuration file

    Returns
    -------
    configs : list
        A list of (linter_name, linter_config) tuples.
    """
    with open(config_file, 'r') as f:
        raw_config = yaml.load(f)

    configs = []
    for mapping in raw_config['linters']:
        if len(mapping) != 1:
            raise IOError('Every item in the linter section in .cardboardlint.yml should '
                          'only specify one linter. You probably have to add a dash in '
                          'front of a linter name, e.g. `- import` instead of `import`.')
        linter_name, linter_config = mapping.popitem()
        if linter_config is None:
            linter_config = {}
        configs.append((linter_name, linter_config))
    return configs


LINTERS = {
    'cppcheck': linter_cppcheck,
    'import': linter_import,
    'namespace': linter_namespace,
    'pylint': linter_pylint,
}


if __name__ == '__main__':
    main()
