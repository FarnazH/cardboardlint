#!/usr/bin/env python

import argparse
import subprocess
import sys

import yaml
from cardboardlint.linter_cppcheck import linter_cppcheck
from cardboardlint.linter_import import linter_import
from cardboardlint.linter_namespace import linter_namespace
from cardboardlint.linter_pylint import linter_pylint


def main():
    # get arguments
    args = parse_args()

    # get git diff
    if args.refspec is None:
        files_lines = None
    else:
        files_lines = run_diff(args.refspec)

    # load lint configuration for module
    configs = load_config('.cardboardlint.yml')

    # select specific linter if desired
    if args.selections is not None:
        configs = [(linter_name, linter_config) for linter_name, linter_config in configs
                   if linter_name in args.selection]

    returncode = 0
    for linter_name, linter_config in configs:
        messages = [message for message
                    in LINTERS[linter_name](linter_config, files_lines)
                    if message.indiff(files_lines)]
        messages.sort()
        if len(messages) > 0:
            returncode = -1
        for message in messages:
            print(message)
    sys.exit(returncode)


def parse_args():
    """Parse the arguments given to the script."""
    parser = argparse.ArgumentParser(prog='cardboardlint')
    parser.add_argument('--refspec', dest='refspec', nargs='?', default=None,
                        help=('The parent commit used to compute the diff. If given, only the files'
                              ' that have been changed will be compared. Otherwise, all files are '
                              'compared.'))
    # The next argument should become a lot smarter in future, e.g. select all static or
    # dynamic linters, or a fraction of them, e.g. "dynamic 0%-33%".
    parser.add_argument('--selections', dest='selections', nargs='*', default=None,
                        help='Run just the given linters.')
    return parser.parse_args()


def run_diff(refspec_parent):
    """Run git diff with respect to current branch

    Parameters
    ----------
    refspec_parent : str
        Reference to the parent branch

    Returns
    -------
    files_lines : dict
        Dictionary of filename to the set of line numbers (that have been modified)
    """
    # generate 0 lines of context (i.e. only the lines that differ)
    command = ['git', 'diff', '-U0', refspec_parent]
    diff_output = subprocess.check_output(command).decode('utf-8')

    # parse git diff output
    files_lines = {}
    current_filename = None
    for line in diff_output.splitlines():
        if line.startswith('+++ b/'):
            current_filename = line[6:]
        elif line.startswith('@@ '):
            added_str = line.split()[2]
            # multiple lines added/modified
            if added_str.count(',') == 1:
                offset, nlines = added_str.split(',')
                line_numbers = set(range(int(offset), int(offset) + int(nlines) + 1))
            # single line added/modified
            else:
                offset = int(added_str)
                line_numbers = set([offset])
            # store line numbers
            files_lines.setdefault(current_filename, set()).update(line_numbers)
    return files_lines


def load_config(config_file):
    """Returns dictionary that corresponds to the given yaml file

    Parameters
    ----------
    config_file : str
        Name of the configuration file

    Returns
    -------
    real_config : dict
        Dictionary of the configurations where default values have been applied.
    """
    with open(config_file, 'r') as f:
        raw_config = yaml.load(f)

    # find default configuration
    defaults = raw_config['defaults']
    configs = []

    for mapping in raw_config['linters']:
        print mapping
        if len(mapping) != 1:
            raise IOError('Every item in the linter section should only specify one linter.')
        linter_name, linter_config_overlay = mapping.popitem()
        linter_config = defaults.copy()
        if linter_config_overlay is not None:
            linter_config.update(linter_config_overlay)
        configs.append((linter_name, linter_config))

    return configs


LINTERS = {
    'cppcheck': linter_cppcheck,
    'import': linter_import,
    'namespace': linter_namespace,
    'pylint': linter_pylint,
}


if __name__ == '__main__':
    main()
