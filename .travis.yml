env:
  matrix:
  - MYCONDAPY=2.7
  - MYCONDAPY=3.5
  - MYCONDAPY=3.6
  global:
  - PYPKG=cardboardlint
  - GITHUB_REPO_NAME=theochem/cardboardlint

# Do not use Travis Python to save some time.
language: generic
os:
- linux
#- osx
#osx_image: xcode6.4
dist: trusty
sudo: false

branches:
  only:
  - master
  - /^[0-9]+\.[0-9]+(\.[0-9]+)?([ab][0-9]+)?$/

install:
# Get miniconda. Take the right version, so re-installing python is only needed for 3.5.
- if [[ "$MYCONDAPY" == "2.7" ]]; then
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh -O miniconda.sh;
    fi;
  else
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
    fi;
  fi
- bash miniconda.sh -b -p $HOME/miniconda
- source $HOME/miniconda/bin/activate
- hash -r

# Configure conda and get a few essentials
- conda config --set always_yes yes --set changeps1 no
- conda config --add channels theochem
- conda update -q conda
# Get the right python version for building. This only does something for 3.5.
# Install extra package needed to make things work. Most things can be listed as
# dependencies on metal.yaml and setup.py, unless setup.py already imports them.
# Install conda tools for packaging and uploading
- conda install python=${MYCONDAPY} cppcheck conda-build anaconda-client
# Pip install python-based linters
- pip install pylint codecov coverage pycodestyle pydocstyle
# Useful for debugging
- conda info -a

script:
# Install the package, in a way that facilitates coverage analysis on the installed script.
- python setup.py develop

# Run the cardboardlinter, to get the exit code for Travis CI. No arguments because we
# want everything to be clean from the start.
- cardboardlinter

# Run tests out of source tree, to make sure that installed version is tested.
- (cd; nosetests $PYPKG -v --detailed-errors --with-coverage --cover-package=$PYPKG --cover-tests --cover-erase --cover-inclusive --cover-branches --cover-xml)

# Run the program on itself, in case of pull requests (with coverage).
- if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    coverage run --include=*cardboardlint* $(which cardboardlinter) --refspec $TRAVIS_BRANCH;
    coverage xml -o ~/coverage_self_diff.xml;
  fi

# Run the program on the example, without using the diff
- (export PYTHONPATH=$PWD;
   cd tools/example;
   coverage run --include=*cardboardlint* --omit=*poor* ../../scripts/cardboardlinter;
   coverage xml -o ~/coverage_example_all.xml)

# Build source package, should work too and needed for deployment to Github and
# PyPI.
- python setup.py sdist

after_success:
# Upload the coverage analysis
- codecov --file ~/coverage.xml --name unittest
- codecov --file ~/coverage_example_all.xml --name example
